[{"path":"http://andyteucher.ca/lutz/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Andy Teucher. Author, maintainer. Bob Rudis. Contributor.","code":""},{"path":"http://andyteucher.ca/lutz/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Teucher (2023). lutz: Look Time Zones Point Coordinates. https://andyteucher.ca/lutz/, https://github.com/ateucher/lutz.","code":"@Manual{,   title = {lutz: Look Up Time Zones of Point Coordinates},   author = {Andy Teucher},   year = {2023},   note = {https://andyteucher.ca/lutz/, https://github.com/ateucher/lutz}, }"},{"path":[]},{"path":"http://andyteucher.ca/lutz/dev/index.html","id":"lookup-the-time-zone-of-coordinates","dir":"","previous_headings":"","what":"Lookup the time zone of coordinates","title":"Look Up Time Zones of Point Coordinates","text":"Input latitude longitude values sf/sfc POINT object get back time zone exist. Two methods implemented. One fast uses Rcpp conjunction source data (https://github.com/darkskyapp/tz-lookup-oss/). However, speed comes cost accuracy - near time zone borders away populated centres chance return incorrect time zone. method slower accurate - uses sf package intersect points detailed map time zones .","code":""},{"path":"http://andyteucher.ca/lutz/dev/index.html","id":"time-zone-utility-functions","dir":"","previous_headings":"","what":"time zone utility functions","title":"Look Up Time Zones of Point Coordinates","text":"lutz also contains several utility functions helping understand visualize time zones, listing world time zones,including information daylight savings times offsets UTC. can also plot time zone visualize UTC offset year daylight savings times effect.","code":""},{"path":"http://andyteucher.ca/lutz/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Look Up Time Zones of Point Coordinates","text":"can install lutz CRAN : can install development version github :","code":"install.packages(\"lutz\") # install.packages(\"devtools\") devtools::install_github(\"ateucher/lutz\")"},{"path":"http://andyteucher.ca/lutz/dev/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"Look Up Time Zones of Point Coordinates","text":"two functions package looking time zones coordinates: tz_lookup() works sf/sfc SpatialPoints objects, tz_lookup_coords looking lat/long pairs. Use method argument choose \"fast\" \"accurate\" method.","code":""},{"path":"http://andyteucher.ca/lutz/dev/index.html","id":"with-coordinates-they-must-be-latlong-in-decimal-degrees","dir":"","previous_headings":"Examples","what":"With coordinates. They must be lat/long in decimal degrees:","title":"Look Up Time Zones of Point Coordinates","text":"","code":"library(lutz) tz_lookup_coords(49.5, -123.5, method = \"fast\") #> [1] \"America/Vancouver\" tz_lookup_coords(49.5, -123.5, method = \"accurate\") #> [1] \"America/Vancouver\"  tz_lookup_coords(lat = c(48.9, 38.5, 63.1, -25), lon = c(-123.5, -110.2, -95.0, 130)) #> [1] \"America/Vancouver\"    \"America/Denver\"       \"America/Rankin_Inlet\" #> [4] \"Australia/Darwin\""},{"path":"http://andyteucher.ca/lutz/dev/index.html","id":"with-sf-objects","dir":"","previous_headings":"Examples","what":"With sf objects:","title":"Look Up Time Zones of Point Coordinates","text":"","code":"library(sf) library(ggplot2) # this requires the devlopment version of ggplot2  # Create an sf object out of the included state.center dataset: pts <- lapply(seq_along(state.center$x), function(i) {   st_point(c(state.center$x[i], state.center$y[i])) }) state_centers_sf <- st_sf(st_sfc(pts))  # Use tz_lookup_sf to find the time zones state_centers_sf$tz <- tz_lookup(state_centers_sf) state_centers_sf$tz <- tz_lookup(state_centers_sf, method = \"accurate\")  ggplot() +    geom_sf(data = state_centers_sf, aes(colour = tz)) +    theme_minimal() +    coord_sf(datum = NA)"},{"path":"http://andyteucher.ca/lutz/dev/index.html","id":"with-spatialpoints-objects","dir":"","previous_headings":"Examples","what":"With SpatialPoints objects:","title":"Look Up Time Zones of Point Coordinates","text":"Note regions world single point can land two different overlapping time zones. \"accurate\" method includes , however method used \"fast\" include overlapping time zones (least now). can compare accuracy methods high-resolution time zone map provided https://github.com/evansiroky/timezone-boundary-builder. map used lutz \"accurate\" method, lutz simplified 80% small enough fit package.","code":"library(sp) state_centers_sp <- as(state_centers_sf, \"Spatial\")  state_centers_sp$tz <- tz_lookup(state_centers_sp)  ggplot(cbind(as.data.frame(coordinates(state_centers_sp)), tz = state_centers_sp$tz),         aes(x = coords.x1, y = coords.x2, colour = tz)) +    geom_point() +    coord_fixed() +    theme_minimal() ## Get the full time zone geojson from https://github.com/evansiroky/timezone-boundary-builder download.file(\"https://github.com/evansiroky/timezone-boundary-builder/releases/download/2019a/timezones-with-oceans.geojson.zip\",                 destfile = \"tz.zip\") unzip(\"tz.zip\", exdir = \"data-raw/dist/\") library(lutz) library(sf) library(purrr) library(dplyr)  tz_full <- read_sf(\"data-raw/dist/combined-with-oceans.json\") # Create a data frame of 500000 lat/long pairs: set.seed(1) n <- 500000 ll <- data.frame(id = seq(n), lat = runif(n, -90, 90), lon = runif(n, -180, 180)) ll_sf <- st_as_sf(ll, coords = c(\"lon\", \"lat\"), crs = 4326)  # Overlay those points with the full high-resolution time zone map: ref_ll_tz <- sf::st_join(ll_sf, tz_full)  # Combine those that had overlapping time zones ref_ll_tz <- ref_ll_tz %>%    st_set_geometry(NULL) %>%    group_by(id) %>%    summarize(tzid = paste(tzid, collapse = \"; \"))  # run tz_lookup with both `\"fast\"` and `\"accurate\"` methods and compare with  # the time zones looked up with the high-resolution map: tests <- map_df(c(\"fast\", \"accurate\"), ~ {   time <- system.time(test_ll_tz <- tz_lookup(ll_sf, method = .x, warn = FALSE))   comp <- ref_ll_tz$tzid == test_ll_tz   matches <- sum(comp, na.rm = TRUE)   mismatches <- sum(!comp, na.rm = TRUE)   list(     method = .x,     time = time[\"elapsed\"],     matches = matches,     mismatches = mismatches,     accuracy = matches / (matches + mismatches),     ref_nas = sum(is.na(ref_ll_tz$tzid)),     fun_nas = sum(is.na(test_ll_tz))     ) }) knitr::kable(tests)"},{"path":[]},{"path":"http://andyteucher.ca/lutz/dev/index.html","id":"tz_plot","dir":"","previous_headings":"time zone utility functions","what":"tz_plot()","title":"Look Up Time Zones of Point Coordinates","text":"","code":"tz_plot(\"America/Vancouver\")"},{"path":"http://andyteucher.ca/lutz/dev/index.html","id":"tz_offset","dir":"","previous_headings":"time zone utility functions","what":"tz_offset()","title":"Look Up Time Zones of Point Coordinates","text":"","code":"# A Date object tz_offset(Sys.Date(), \"Africa/Algiers\") #>          tz_name  date_time zone is_dst utc_offset_h #> 1 Africa/Algiers 2023-10-17  CET  FALSE            1   # A Date-like character string tz_offset(\"2017-03-01\", tz = \"Singapore\") #>     tz_name  date_time zone is_dst utc_offset_h #> 1 Singapore 2017-03-01  +08  FALSE            8   # A POSIXct date-time object tz_offset(Sys.time()) #> Warning: You supplied an object of class POSIXct that does not have a time zone #> attribute, and did not specify one inthe 'tz' argument. Defaulting to current #> (America/Vancouver). #>             tz_name           date_time zone is_dst utc_offset_h #> 1 America/Vancouver 2023-10-17 12:11:11  PDT   TRUE           -7"},{"path":"http://andyteucher.ca/lutz/dev/index.html","id":"tz_list","dir":"","previous_headings":"time zone utility functions","what":"tz_list()","title":"Look Up Time Zones of Point Coordinates","text":"","code":"tz_list() %>%    head(20) %>%    knitr::kable()"},{"path":"http://andyteucher.ca/lutz/dev/reference/lutz-package.html","id":null,"dir":"Reference","previous_headings":"","what":"lutz: Look Up Time Zones of Point Coordinates — lutz-package","title":"lutz: Look Up Time Zones of Point Coordinates — lutz-package","text":"Input latitude longitude values 'sf/sfc' POINT object get back time zone exist. Two methods implemented. One fast uses 'Rcpp' conjunction data 'Javascript' library (https://github.com/darkskyapp/tz-lookup-oss/). method also works outside countries' borders international waters, however speed comes cost accuracy - near time zone borders away populated centres chance return incorrect time zone. method slower accurate - uses 'sf' package intersect points detailed map time zones : https://github.com/evansiroky/timezone-boundary-builder/. package also contains several utility functions helping understand visualize time zones, listing world time zones, including information daylight savings times offsets UTC. can also plot time zone visualize UTC offset year daylight savings times effect.","code":""},{"path":[]},{"path":"http://andyteucher.ca/lutz/dev/reference/lutz-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"lutz: Look Up Time Zones of Point Coordinates — lutz-package","text":"Maintainer: Andy Teucher andy.teucher@gmail.com (ORCID) contributors: Bob Rudis bob@rud.(ORCID) [contributor]","code":""},{"path":"http://andyteucher.ca/lutz/dev/reference/tz_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a list of Time Zones — tz_list","title":"Create a list of Time Zones — tz_list","text":"Output list time zone names, daylight savings time utc offset","code":""},{"path":"http://andyteucher.ca/lutz/dev/reference/tz_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a list of Time Zones — tz_list","text":"","code":"tz_list()"},{"path":"http://andyteucher.ca/lutz/dev/reference/tz_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a list of Time Zones — tz_list","text":"data.frame time zones system. Columns: tz_name: name time zone zone: time zone is_dst: time zone daylight savings time utc_offset_h: offset UTC (hours)","code":""},{"path":"http://andyteucher.ca/lutz/dev/reference/tz_lookup.html","id":null,"dir":"Reference","previous_headings":"","what":"Lookup time zones of sf or sp points — tz_lookup","title":"Lookup time zones of sf or sp points — tz_lookup","text":"two methods - \"fast\", \"accurate\". \"fast\" version can look many thousands points quickly, however  point near time zone boundary near populated centre, may return incorrect time zone. accuracy important speed, use method = \"accurate\".","code":""},{"path":"http://andyteucher.ca/lutz/dev/reference/tz_lookup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lookup time zones of sf or sp points — tz_lookup","text":"","code":"tz_lookup(x, crs = NULL, method = \"fast\", warn = TRUE)"},{"path":"http://andyteucher.ca/lutz/dev/reference/tz_lookup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lookup time zones of sf or sp points — tz_lookup","text":"x either sfc sf points SpatialPoints(DataFrame) object crs coordinate reference system: integer EPSG code, character proj4string. specified (.e., NULL) x existing crs, EPSG: 4326 assumed (lat/long). method method lookup. Either \"fast\" (default) \"accurate\". warn default, method = \"fast\" warning issued potential inaccurate results. Set warn FALSE turn .","code":""},{"path":"http://andyteucher.ca/lutz/dev/reference/tz_lookup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lookup time zones of sf or sp points — tz_lookup","text":"character vector length x specifying time zone points.","code":""},{"path":"http://andyteucher.ca/lutz/dev/reference/tz_lookup.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Lookup time zones of sf or sp points — tz_lookup","text":"Note regions world single point can land two different overlapping time zones. \"accurate\" method includes , encountered concatenated single string, separated semicolon. data used \"fast\" method include overlapping time zones time.","code":""},{"path":"http://andyteucher.ca/lutz/dev/reference/tz_lookup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lookup time zones of sf or sp points — tz_lookup","text":"","code":"if (require(\"sf\")) {  state_pts <- lapply(seq_along(state.center$x), function(i) {   st_point(c(state.center$x[i], state.center$y[i])) })  state_centers_sf <- st_sf(st_sfc(state_pts))  state_centers_sf$tz <- tz_lookup(state_centers_sf)  plot(state_centers_sf[, \"tz\"]) } #> Loading required package: sf #> Linking to GEOS 3.10.2, GDAL 3.4.1, PROJ 8.2.1; sf_use_s2() is TRUE #> Warning: Using 'fast' method. This can cause inaccuracies in time zones #>   near boundaries away from populated ares. Use the 'accurate' #>   method if accuracy is more important than speed."},{"path":"http://andyteucher.ca/lutz/dev/reference/tz_lookup_coords.html","id":null,"dir":"Reference","previous_headings":"","what":"Lookup time zones of lat/long pairs — tz_lookup_coords","title":"Lookup time zones of lat/long pairs — tz_lookup_coords","text":"two methods - \"fast\", \"accurate\". \"fast\" version can look many thousands points quickly, however  point near time zone boundary near populated centre, may return incorrect time zone. accuracy important speed, use method = \"accurate\".","code":""},{"path":"http://andyteucher.ca/lutz/dev/reference/tz_lookup_coords.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lookup time zones of lat/long pairs — tz_lookup_coords","text":"","code":"tz_lookup_coords(lat, lon, method = \"fast\", warn = TRUE)"},{"path":"http://andyteucher.ca/lutz/dev/reference/tz_lookup_coords.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lookup time zones of lat/long pairs — tz_lookup_coords","text":"lat numeric vector latitudes lon numeric vector longitudes length x method method lookup. Either \"fast\" (default) \"accurate\". warn default, method = \"fast\" warning issued potential inaccurate results. Set warn FALSE turn .","code":""},{"path":"http://andyteucher.ca/lutz/dev/reference/tz_lookup_coords.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lookup time zones of lat/long pairs — tz_lookup_coords","text":"character vector length x y specifying time zone points.","code":""},{"path":"http://andyteucher.ca/lutz/dev/reference/tz_lookup_coords.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lookup time zones of lat/long pairs — tz_lookup_coords","text":"","code":"tz_lookup_coords(42, -123) #> Warning: Using 'fast' method. This can cause inaccuracies in time zones #>   near boundaries away from populated ares. Use the 'accurate' #>   method if accuracy is more important than speed. #> [1] \"America/Los_Angeles\" tz_lookup_coords(lat = c(48.9, 38.5, 63.1, -25), lon = c(-123.5, -110.2, -95.0, 130)) #> Warning: Using 'fast' method. This can cause inaccuracies in time zones #>   near boundaries away from populated ares. Use the 'accurate' #>   method if accuracy is more important than speed. #> [1] \"America/Vancouver\"    \"America/Denver\"       \"America/Rankin_Inlet\" #> [4] \"Australia/Darwin\""},{"path":"http://andyteucher.ca/lutz/dev/reference/tz_offset.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the offset from UTC at a particular date/time in a particular time zone — tz_offset","title":"Find the offset from UTC at a particular date/time in a particular time zone — tz_offset","text":"Find offset UTC particular date/time particular time zone","code":""},{"path":"http://andyteucher.ca/lutz/dev/reference/tz_offset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the offset from UTC at a particular date/time in a particular time zone — tz_offset","text":"","code":"tz_offset(dt, tz = \"\")"},{"path":"http://andyteucher.ca/lutz/dev/reference/tz_offset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the offset from UTC at a particular date/time in a particular time zone — tz_offset","text":"dt Date, POSIXt date-like character string tz time zone name base::OlsonNames(). required dt POSIXt object time zone component.","code":""},{"path":"http://andyteucher.ca/lutz/dev/reference/tz_offset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the offset from UTC at a particular date/time in a particular time zone — tz_offset","text":"one-row data frame details time zone","code":""},{"path":"http://andyteucher.ca/lutz/dev/reference/tz_offset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find the offset from UTC at a particular date/time in a particular time zone — tz_offset","text":"","code":"tz_offset(\"2018-06-12\", \"America/Moncton\") #>           tz_name  date_time zone is_dst utc_offset_h #> 1 America/Moncton 2018-06-12  ADT   TRUE           -3"},{"path":"http://andyteucher.ca/lutz/dev/reference/tz_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a time zone — tz_plot","title":"Plot a time zone — tz_plot","text":"Make circular plot time zone, visualizing UTC offset course year, including Daylight Savings times","code":""},{"path":"http://andyteucher.ca/lutz/dev/reference/tz_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a time zone — tz_plot","text":"","code":"tz_plot(tz)"},{"path":"http://andyteucher.ca/lutz/dev/reference/tz_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a time zone — tz_plot","text":"tz valid time zone name. See OlsonNames()","code":""},{"path":"http://andyteucher.ca/lutz/dev/reference/tz_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a time zone — tz_plot","text":"ggplot2 object","code":""},{"path":"http://andyteucher.ca/lutz/dev/reference/tz_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a time zone — tz_plot","text":"","code":"tz_plot(\"America/Vancouver\")"},{"path":"http://andyteucher.ca/lutz/dev/news/index.html","id":"lutz-development-version","dir":"Changelog","previous_headings":"","what":"lutz (development version)","title":"lutz (development version)","text":"maintenance release, new features. rgdal package removed Suggested package, archived CRAN.","code":""},{"path":"http://andyteucher.ca/lutz/dev/news/index.html","id":"lutz-031","dir":"Changelog","previous_headings":"","what":"lutz 0.3.1","title":"lutz 0.3.1","text":"CRAN release: 2019-07-19 Fixed bug invalid timezones cause tz_list() fail.","code":""},{"path":"http://andyteucher.ca/lutz/dev/news/index.html","id":"lutz-030","dir":"Changelog","previous_headings":"","what":"lutz 0.3.0","title":"lutz 0.3.0","text":"CRAN release: 2019-07-14 V8-based ‘fast’ method ported use Rcpp - now even faster, can drop V8 dependency. Thanks @hrbrmstr! (#4) Bob Rudis (@hrbrmstr) added author Upgraded time zone map 2019b Dealt areas overlapping time zones (#2) tz_list() lists time zones information UTC offsets daylight savings tz_offset() lists information specific time specific time zone tz_plot() plots time zone UTC offset year, including periods daylight savings.","code":""},{"path":"http://andyteucher.ca/lutz/dev/news/index.html","id":"lutz-020","dir":"Changelog","previous_headings":"","what":"lutz 0.2.0","title":"lutz 0.2.0","text":"CRAN release: 2018-06-24 Added method = \"accurate\" slower, accurate lookup. Updated timezone map","code":""},{"path":"http://andyteucher.ca/lutz/dev/news/index.html","id":"lutz-010","dir":"Changelog","previous_headings":"","what":"lutz 0.1.0","title":"lutz 0.1.0","text":"CRAN release: 2018-02-07 Initial release","code":""}]
